#Check kubelet process thats running:
ps aux | grep -i "kubelet"

# Run kubectl in verbose mode to check the api calls that are being made to apiserver
kubectl get pods --v=8

#Running container using Docker

docker run alpine echo "Hello world"
Ref:
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker run <image>:<tag>

#After cloning the repo for express-app
cd <path where the docker file is present>
#To build the dockerfile
docker build -t node-app .
# To view the docker image thats being created
docker images
docker run --name express-app -p 3000:3000 -d node-app
Ref: docker run --name <CONTAINER_NAME> -d -p <HOST_PORT>:<CONTAINER_PORT> <IMAGE_NAME>[:<TAG>]

# Make calls to confirm application is running
curl localhost:3000 ( For this example ID of the Docker container is set as the hostname)

#Check the container list and status
docker ps

# Describe container
docker inspect express-app
docker exec -it express-app bash
ps aux
# Compare with processes from host
ps aux | grep index.js (processes have different IDs inside the container vs. on the host)

#To push to docker registry:
docker login -u <userid>
sudo docker tag node-app indra12/node-app

#Working with kubernetes
Cluster Info:

kubectl cluster-info

kubectl get nodes
kubectl describe node <node-name> - output: nodeâ€™s status, its CPU and memory data, system information, containers running on the node, and much more.

kubectl run kubia --image=luksa/kubia --port=8080 --generator=run/v1

kubectl run my-node-app --image=node:latest --port=8080 --restart=Never --expose

kubectl expose rc kubia --type=LoadBalancer --name kubia-http

kubectl get services

curl 104.155.74.57:3000

kubectl get replicationcontrollers

kubectl scale rc kubia --replicas=3 ( imperaive vs declarative)

kubectl get rc

kubectl get pods -o wide

kubectl describe pod kubia-hczji