#Check kubelet process thats running:
ps aux | grep -i "kubelet"

# Run kubectl in verbose mode to check the api calls that are being made to apiserver
kubectl get pods --v=8

#Running container using Docker

docker run alpine echo "Hello world"
Ref:
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker run <image>:<tag>

#After cloning the repo for express-app
cd <path where the docker file is present>
#To build the dockerfile
docker build -t node-app .
# To view the docker image thats being created
docker images
docker run --name express-app -p 3000:3000 -d node-app
Ref: docker run --name <CONTAINER_NAME> -d -p <HOST_PORT>:<CONTAINER_PORT> <IMAGE_NAME>[:<TAG>]

# Make calls to confirm application is running
curl localhost:3000 ( For this example ID of the Docker container is set as the hostname)

#Check the container list and status
docker ps

# Describe container
docker inspect express-app
docker exec -it express-app bash
ps aux
# Compare with processes from host
ps aux | grep index.js (processes have different IDs inside the container vs. on the host)

#To push to docker registry:
docker login -u <userid>
sudo docker tag node-app indra12/node-app

#Working with kubernetes
Cluster Info:

kubectl cluster-info
kubectl get nodes
kubectl describe node <node-name>

kubectl run express-app-pod --image=indra12/node-app:latest --port=3000 --restart=Never

#delete the pod and then

### Depricated kubectl run  express-app-rc --image=indra12/node-app:latest --port=3000 --generator=run/v1

kubectl create replicaset --dry-run=client --image=indra12/node-app:latest --replicas=2 --port=8080 -o yaml
kubectl expose rc express-app-rc --type=ClusterIp --name express-app-rc

kubectl get services

curl service-ip:3000

kubectl get replicationcontrollers ( or rc)

kubectl scale rc express-app-rc --replicas=3

kubectl get rc

#List more attributes associated with pods
kubectl get pods -o wide

#Get detailed info of Pod
kubectl describe pod <podname>

